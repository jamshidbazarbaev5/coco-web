"use client"

import { useState } from "react"
import { ChevronDown } from "lucide-react"
import { useRouter, useParams } from "next/navigation"
import styles from '../styles/language-selector.module.css'

type Language = {
  code: string
  name: string
  flag: JSX.Element
}

export default function LanguageSelector() {
  const router = useRouter()
  const params = useParams()
  const [isOpen, setIsOpen] = useState(false)
  
  const languages: Language[] = [
    {
      code: "ru",
      name: "Рус",
      flag: (
        <svg width="52" height="24" viewBox="0 0 52 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <ellipse cx="11.9994" cy="11.9994" rx="11.9994" ry="11.9994" fill="white"/>
          <path d="M23.3115 8H15.918C16.2391 10.5634 16.241 13.3879 15.9242 15.9544H23.3273C23.7594 14.7162 23.997 13.3865 23.997 12.0011C23.9972 10.5975 23.7541 9.25147 23.3115 8Z" fill="#3757A6"/>
          <path d="M15.9212 8.00046H23.3146C23.3134 7.99666 23.3123 7.99347 23.3108 7.99002C21.7751 3.65968 17.8246 0.473697 13.0781 0.0507812C14.9151 1.05763 15.4517 4.24762 15.9212 8.00046Z" fill="white"/>
          <path d="M13.0781 23.9498C17.8331 23.5261 21.7891 20.3292 23.3189 15.9872C23.3229 15.9757 23.3263 15.9643 23.3304 15.9531H15.9272C15.4613 19.7263 14.9224 22.9388 13.0781 23.9498Z" fill="#E73B36"/>
          <path d="M0 12.0011C0 13.3867 0.237981 14.7162 0.669762 15.9544H16.5443C16.8615 13.3877 16.8592 10.5634 16.5384 8H0.685722C0.243099 9.25152 0 10.5975 0 12.0011Z" fill="#3757A6"/>
          <path d="M0.687394 7.98849C0.686279 7.99188 0.685114 7.99513 0.683594 7.99893H16.5363C16.0664 4.24603 14.9122 1.0561 13.0754 0.0492482C12.7202 0.0177841 12.3609 0 11.9976 0C6.77742 -5.06668e-05 2.33826 3.33388 0.687394 7.98849Z" fill="white"/>
          <path d="M16.5464 15.9531H0.671875C0.675878 15.9643 0.679627 15.9757 0.683427 15.9872C2.32771 20.6537 6.77325 23.9995 12.0017 23.9995C12.3652 23.9995 12.7244 23.9816 13.0796 23.9498C14.9241 22.9388 16.0805 19.7263 16.5464 15.9531Z" fill="#E73B36"/>
          <path d="M38.765 9.7418L41.9983 12.9751L45.2316 9.7418C45.5566 9.4168 46.0816 9.4168 46.4066 9.7418C46.7316 10.0668 46.7316 10.5918 46.4066 10.9168L42.5816 14.7418C42.2566 15.0668 41.7316 15.0668 41.4066 14.7418L37.5816 10.9168C37.2566 10.5918 37.2566 10.0668 37.5816 9.7418C37.9066 9.42513 38.44 9.4168 38.765 9.7418Z" fill="#18191A"/>
        </svg>
      )
    },
    {
      code: "uz",
      name: "Uzb",
      flag: (
        <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_23_514)">
        <path d="M9.0002 0.5625C5.42832 0.5625 2.39082 2.78437 1.15332 5.90625H16.8471C15.6096 2.78437 12.5721 0.5625 9.0002 0.5625Z" fill="#42ADE2"/>
        <path d="M9.0002 17.4375C12.5721 17.4375 15.6096 15.2156 16.8471 12.0938H1.15332C2.39082 15.2156 5.42832 17.4375 9.0002 17.4375Z" fill="#83BF4F"/>
        <path d="M17.4375 9C17.4375 8.12813 17.2969 7.25625 17.0437 6.46875H0.95625C0.703125 7.25625 0.5625 8.12813 0.5625 9C0.5625 9.87188 0.703125 10.7438 0.95625 11.5312H17.0437C17.2969 10.7438 17.4375 9.87188 17.4375 9Z" fill="white"/>
        <path d="M16.8467 5.90625C16.8748 5.99063 16.9311 6.10312 16.9592 6.1875C16.9873 6.27187 17.0154 6.38438 17.0436 6.46875" fill="#C94747"/>
        <path d="M16.9592 6.1875C16.9311 6.10312 16.8748 5.99063 16.8467 5.90625H1.15293C1.1248 5.99063 1.06855 6.10312 1.04043 6.1875C1.0123 6.27187 0.98418 6.38438 0.956055 6.46875H17.0436C17.0154 6.38438 16.9873 6.27187 16.9592 6.1875ZM1.04043 11.8125C1.06855 11.8969 1.1248 12.0094 1.15293 12.0938H16.8467C16.8748 12.0094 16.9311 11.8969 16.9592 11.8125C16.9873 11.7281 17.0154 11.6156 17.0436 11.5312H0.956055C0.98418 11.6156 1.0123 11.7281 1.04043 11.8125Z" fill="#C94747"/>
        <path d="M5.7375 4.86562C5.0625 4.86562 4.52813 4.33125 4.52813 3.65625C4.52813 2.98125 5.0625 2.44687 5.7375 2.44687C5.90625 2.44687 6.04688 2.475 6.1875 2.53125C5.9625 2.3625 5.65313 2.25 5.34375 2.25C4.55625 2.25 3.9375 2.86875 3.9375 3.65625C3.9375 4.44375 4.55625 5.0625 5.34375 5.0625C5.65313 5.0625 5.9625 4.95 6.1875 4.78125C6.04688 4.8375 5.90625 4.86562 5.7375 4.86562ZM6.94688 4.275L7.05938 4.58437H7.36875L7.11562 4.75312L7.2 5.0625L6.94688 4.86562L6.69375 5.0625L6.80625 4.75312L6.55312 4.58437H6.8625L6.94688 4.275ZM8.15625 4.275L8.24062 4.58437H8.57812L8.325 4.75312L8.40937 5.0625L8.15625 4.86562L7.90313 5.0625L7.9875 4.75312L7.73438 4.58437H8.04375L8.15625 4.275ZM9.36562 4.275L9.45 4.58437H9.75938L9.50625 4.75312L9.61875 5.0625L9.36562 4.86562L9.08437 5.0625L9.19688 4.75312L8.94375 4.58437H9.25313L9.36562 4.275ZM10.5469 4.275L10.6594 4.58437H10.9688L10.7156 4.75312L10.8 5.0625L10.5469 4.86562L10.2937 5.0625L10.3781 4.75312L10.125 4.58437H10.4625L10.5469 4.275ZM11.7562 4.275L11.8406 4.58437H12.1781L11.8969 4.75312L12.0094 5.0625L11.7562 4.86562L11.5031 5.0625L11.5875 4.75312L11.3344 4.58437H11.6438L11.7562 4.275ZM8.15625 3.2625L8.24062 3.57187H8.57812L8.325 3.74063L8.40937 4.05L8.15625 3.85312L7.90313 4.05L7.9875 3.74063L7.73438 3.57187H8.04375L8.15625 3.2625ZM9.36562 3.2625L9.45 3.57187H9.75938L9.50625 3.74063L9.61875 4.05L9.36562 3.85312L9.08437 4.05L9.19688 3.74063L8.94375 3.57187H9.25313L9.36562 3.2625ZM10.5469 3.2625L10.6594 3.57187H10.9688L10.7156 3.74063L10.8 4.05L10.5469 3.85312L10.2937 4.05L10.3781 3.74063L10.125 3.57187H10.4625L10.5469 3.2625ZM11.7562 3.2625L11.8406 3.57187H12.1781L11.8969 3.74063L12.0094 4.05L11.7562 3.85312L11.5031 4.05L11.5875 3.74063L11.3344 3.57187H11.6438L11.7562 3.2625ZM9.36562 2.25L9.45 2.55938H9.75938L9.50625 2.72812L9.61875 3.0375L9.36562 2.84063L9.08437 3.0375L9.19688 2.72812L8.94375 2.55938H9.25313L9.36562 2.25ZM10.5469 2.25L10.6594 2.55938H10.9688L10.7156 2.72812L10.8 3.0375L10.5469 2.84063L10.2937 3.0375L10.3781 2.72812L10.125 2.55938H10.4625L10.5469 2.25ZM11.7562 2.25L11.8406 2.55938H12.1781L11.8969 2.72812L12.0094 3.0375L11.7562 2.84063L11.5031 3.0375L11.5875 2.72812L11.3344 2.55938H11.6438L11.7562 2.25Z" fill="white"/>
        </g>
        <defs>
        <clipPath id="clip0_23_514">
        <rect width="18" height="18" fill="white"/>
        </clipPath>
        </defs>
        </svg>
        
      )
    },
  ]

  const currentLang = params.lang as string
  const selectedLanguage = languages.find(lang => lang.code === currentLang) || languages[0]

  const toggleDropdown = () => {
    setIsOpen(!isOpen)
  }

  const selectLanguage = (language: Language) => {
    if (language.code !== currentLang) {
      // Replace the language segment in the current URL
      const newPath = window.location.pathname.replace(`/${currentLang}`, `/${language.code}`)
      router.push(newPath)
    }
    setIsOpen(false)
  }

  return (
    <div className={styles.languageSelector} data-open={isOpen}>
      <div className={styles.selectedLanguage} onClick={toggleDropdown}>
        <div className={styles.flag}>
          {selectedLanguage.flag}
        </div>
        <ChevronDown className={styles.chevron} size={19} />
      </div>

      {isOpen && (
        <div className={styles.dropdown}>
          {languages.map((language) => (
            <div
              key={language.code}
              className={`${styles.option} ${selectedLanguage.code === language.code ? styles.active : ""}`}
              onClick={() => selectLanguage(language)}
            >
              <div className={styles.flag}>
                {language.flag}
              </div>
              <span className={styles.languageName}>{language.name}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}